The issue that single-threaded-ccl addresses is as follows.

CCL by default starts ancillary threads early during initialization,
which makes any subsequent attempt to use fork (without a prompt exec
as in run-program) almost guaranteed to lead to massive instability.
See my blog post:
	http://fare.livejournal.com/148185.html

However, I have been maintaining this "single-threaded CCL"
modification that can create an image of CCL that doesn't start these
ancillary threads (at the cost of having to manually flush output
streams and of not being able to interrupt computations interactively
with Ctrl-C).

I use this single-threaded CCL for parallel build with POIU, and have
had to update it once in a while as upstream upgrades sometimes break
it.  I also intend to use it in other situations where fork-based
concurrency is called fork: pre-forking servers, robust erlang-style
concurrency, isolating semi-trusted C libraries, etc.

For the record, Gary Byers has expressed his disinterest in offering
and maintaining an option for single-threaded startup in the upstream
CCL, even when I proposed that I could do the porting and maintaining
myself.
